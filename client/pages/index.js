import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import * as EmailValidator from 'email-validator';
import { auth, db } from '../firebase';
import { useCollection } from 'react-firebase-hooks/firestore'
import Chat from '../components/Chat';
import { useState } from 'react';
import getRecipientEmail from '../utils/getRecipientEmail';

export default function Home({ user, chat, messages }) {
  const [isOpen, setIsOpen] = useState(false);

  const chatAlreadyExist = (recipientEmail) => (
    !!chatsSnapshot?.docs.find(chat => 
      chat.data().users.find(user => user === recipientEmail)?.length > 0
    ));

  // SIGNOUT FUNCTION, PUT "ISONLINE" TO FALSE
  const signout = () => {
    auth.signOut();
    db.collection('users').doc(user.uid).update({
      isOnline: false
    });
  }

  // CREATE A NEW CHAT IF
  const createChat = () => {
    const me = "david.chmarzynski@gmail.com";
    if(me !== user.email && !chatAlreadyExist(me)) {
      db.collection("chats").add({
        users: [user.email, me]
      });
    } else if(me !== user.email && chatAlreadyExist(me)) {
        setIsOpen(true);
    }
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Chat with {getRecipientEmail(chat.users, user)}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Chat</h1>
      <button onClick={signout}>Disconnect</button>
      <button onClick={createChat}>Discuss with me</button>
      {isOpen && (
        <Chat chat={chat} messages={messages} />
      )}
    </div>
  )
}

export async function getServerSideProps(context) {
  const ref = db.collection("chats").doc();
  console.log(ref);
  const messageRes = await ref.collection("messages").orderBy('timestamp', 'asc').get();
  const messages = messageRes.docs.map(doc => ({
    id: doc.id,
    ...doc.data(),
  })).map(messages => ({
    ...messages,
    timestamp: messages.timestamp.toDate().getTime()
  }));

  const chatRes = await ref.get();
  const chat = {
    id: chatRes.id,
    ...chatRes.data(),
  }

  console.log(chat, messages);

  return {
    props: {
      messages: JSON.stringify(messages),
      chat: chat
    }
  }
}
